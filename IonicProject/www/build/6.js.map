{"version":3,"sources":["../../src/pages/Modulo3/cargar-video/cargar-video.module.ts","../../src/pages/Modulo3/cargar-video/cargar-video.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACC;AAUjD,IAAa,qBAAqB;IAAlC;IAAoC,CAAC;IAAD,4BAAC;AAAD,CAAC;AAAxB,qBAAqB;IARjC,+DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,sEAAe;SAChB;QACD,OAAO,EAAE;YACP,sEAAe,CAAC,QAAQ,CAAC,sEAAe,CAAC;SAC1C;KACF,CAAC;GACW,qBAAqB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZQ;AACyD;AAChC;AAC+B;AACzC;AACf;AACmB;AACE;AAEZ;AAEnD;;;;;GAKG;AAQH,IAAa,eAAe;IAW1B,yBAAmB,OAAsB,EAC/B,QAAsB,EACtB,IAAU,EACV,QAAkB,EAClB,MAAc,EACd,WAAwB,EACzB,QAAkB,EAClB,eAAsC,EACtC,WAA8B,EAC9B,SAA0B;QAThB,YAAO,GAAP,OAAO,CAAe;QAC/B,aAAQ,GAAR,QAAQ,CAAc;QACtB,SAAI,GAAJ,IAAI,CAAM;QACV,aAAQ,GAAR,QAAQ,CAAU;QAClB,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAa;QACzB,aAAQ,GAAR,QAAQ,CAAU;QAClB,oBAAe,GAAf,eAAe,CAAuB;QACtC,gBAAW,GAAX,WAAW,CAAmB;QAC9B,cAAS,GAAT,SAAS,CAAiB;IAAI,CAAC;IAExC,mCAAS,GAAT;QAAA,iBAMC;QALC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAC,SAAS;YACtC,KAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC5B,CAAC,EAAE,UAAC,GAAG;YACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IACD,gCAAM,GAAN;QAAA,iBAeC;QAdC,IAAM,YAAY,GAAuB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAChE,IAAI,OAAO,GAAG;YACZ,OAAO,EAAE,MAAM;YACf,QAAQ,EAAE,cAAc;YACxB,MAAM,EAAE,EAAE;SACX;QACD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,wDAAwD,CAAC,EAAE,OAAO,CAAC;aAC7G,IAAI,CAAC,UAAC,IAAI;YACT,UAAU;YACV,KAAK,CAAC,aAAa,GAAG,KAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC,EAAE,UAAC,GAAG;YACL,QAAQ;YACR,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC;IACN,CAAC;IAyZH,sBAAC;AAAD,CAAC;AArcY,eAAe;IAL3B,gEAAS,CAAC;QACT,QAAQ,EAAE,mBAAmB;QAC7B,WAAW,8EAAE,CAAmB;OACL;KAC5B,CAAC;0FAYyC;QACrB,iEAAY;QAChB,yEAAI;QACA,qEAAQ;QACV,+EAAM;QACD,gEAAW;QACf,4EAAQ;QACD,yEAAqB;QACzB,wEAAiB;QACnB,YAAe;AAibpC;SArcY,eAAe,gB","file":"6.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { CargarVideoPage } from './cargar-video';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CargarVideoPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(CargarVideoPage),\r\n  ],\r\n})\r\nexport class CargarVideoPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Modulo3/cargar-video/cargar-video.module.ts","import { Component } from '@angular/core';\r\nimport { IonicPage, NavController, NavParams, Platform, ActionSheetController, Loading } from 'ionic-angular';\r\nimport { LoadingController, ToastController } from 'ionic-angular';\r\nimport { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer';\r\nimport { FileChooser } from '@ionic-native/file-chooser';\r\nimport { File } from '@ionic-native/file';\r\nimport { Camera, CameraOptions } from '@ionic-native/camera';\r\nimport { RestApiService } from '../../../app/rest-api.service';\r\nimport { Headers } from '@angular/http/src/headers';\r\nimport { FilePath } from '@ionic-native/file-path';\r\n\r\n/**\r\n * Generated class for the CargarVideoPage page.\r\n *\r\n * See https://ionicframework.com/docs/components/#navigation for more info on\r\n * Ionic pages and navigation.\r\n */\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-cargar-video',\r\n  templateUrl: 'cargar-video.html',\r\n  providers: [RestApiService]\r\n})\r\nexport class CargarVideoPage {\r\n\r\n\r\n  imageURL: any;\r\n  myInput: string;\r\n  cameraUrl: string;\r\n\r\n\r\n  imageURI: any;\r\n  imageFileName: any;\r\n\r\n  constructor(public navCtrl: NavController,\r\n    private transfer: FileTransfer,\r\n    private file: File,\r\n    private filePath: FilePath,\r\n    private camera: Camera,\r\n    private fileChooser: FileChooser,\r\n    public platform: Platform,\r\n    public actionSheetCtrl: ActionSheetController,\r\n    public loadingCtrl: LoadingController,\r\n    public toastCtrl: ToastController) { }\r\n\r\n  takePhoto() {\r\n    this.camera.getPicture().then((imageData) => {\r\n      this.imageURL = imageData;\r\n    }, (err) => {\r\n      console.log(err);\r\n    });\r\n  }\r\n  upload() {\r\n    const fileTransfer: FileTransferObject = this.transfer.create();\r\n    var options = {\r\n      fileKey: 'file',\r\n      fileName: 'filename.jpg',\r\n      params: {}\r\n    }\r\n    fileTransfer.upload(this.imageURL, encodeURI(\"http://192.168.1.116:8080/viucab/Resources/uploadImage\"), options)\r\n      .then((data) => {\r\n        // success\r\n        alert(\"Image send:\" + this.imageURL);\r\n      }, (err) => {\r\n        // error\r\n        alert(\"err: \" + JSON.stringify(err));\r\n      })\r\n  }\r\n\r\n\r\n  /*image: string = null;\r\n  cordova: any;\r\n  lastImage: string = null;\r\n  loading: Loading;\r\n\r\n  nativepath: any;\r\n\r\n  uploadfn() {\r\n    this.fileChooser.open().then((url) => {\r\n      (<any>window).FilePath.resolveNativePath(url, (result) => {\r\n        this.nativepath = result;\r\n        this.presentToast(this.nativepath);\r\n        this.readimage();\r\n      }\r\n      )\r\n    })\r\n  }  \r\n\r\n  readimage() {\r\n    (<any>window).resolveLocalFileSystemURL(this.nativepath, (res) => {\r\n      res.file((resFile) => {\r\n        var reader = new FileReader();\r\n        reader.readAsArrayBuffer(resFile);\r\n        reader.onloadend = (evt: any) => {\r\n          var imgBlob = new Blob([evt.target.result], { type: 'image/jpeg' });\r\n          //do what you want to do with the file\r\n        }\r\n      })\r\n    })\r\n  }*/\r\n\r\n/*public takePicture(sourceType){\r\n  let options = {\r\n    // Some common settings are 20, 50, and 100\r\n    quality: 50,\r\n    destinationType: this.camera.DestinationType.NATIVE_URI,\r\n    // In this app, dynamically set the picture source, Camera or photo gallery\r\n    sourceType: this.camera.PictureSourceType.SAVEDPHOTOALBUM,\r\n    encodingType: this.camera.EncodingType.JPEG,\r\n    mediaType: this.camera.MediaType.PICTURE,\r\n    allowEdit: false,\r\n    correctOrientation: false  //Corrects Android orientation quirks\r\n  }*/\r\n\r\n  /*this.camera.getPicture(options).then((imageData) => {\r\n    // imageData is either a base64 encoded string or a file URI\r\n    // If it's base64:\r\n    this.image = imageData;\r\n    this.presentToast(imageData);\r\n  }, (err) => {\r\n    // Handle error\r\n    this.presentToast(err);\r\n  });\r\n}*/\r\n\r\n  /*presentToast(msg) {\r\n    let toast = this.toastCtrl.create({\r\n      message: msg,\r\n      duration: 2000,\r\n      position: 'bottom'\r\n    });\r\n\r\n    toast.onDidDismiss(() => {\r\n      console.log('Dismissed toast');\r\n    });\r\n\r\n    toast.present();\r\n  }\r\n\r\n  uploadFile() {\r\n    const fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n    let options: FileUploadOptions = {\r\n      fileKey: 'ionicfile',\r\n      fileName: 'ionicfile',\r\n      httpMethod: \"POST\",\r\n      chunkedMode: false,\r\n      mimeType: \"multipart/form-data\",\r\n      headers: {}\r\n    }\r\n    try {\r\n      \r\n    \r\n    this.presentToast(this.nativepath);\r\n    fileTransfer.upload(this.nativepath, 'http://192.168.1.116:8080/viucab/Resources/uploadImage', options)\r\n      .then((data) => {\r\n        console.log(data + \" Uploaded Successfully\");\r\n        this.imageFileName = \"foo\"\r\n        this.presentToast(\"Image uploaded successfully\");\r\n      }, (err) => {\r\n        console.log(err);\r\n        this.presentToast(err);\r\n      });\r\n    } catch (error) {\r\n      this.presentToast(error);\r\n    }\r\n    //this.presentToast(\"despues de upload\");\r\n  }*/\r\n\r\n/*\r\n  public presentActionSheet() {\r\n    let actionSheet = this.actionSheetCtrl.create({\r\n      title: 'Select Image Source',\r\n      buttons: [\r\n        {\r\n          text: 'Load from Library',\r\n          handler: () => {\r\n            this.takePicture(this.camera.PictureSourceType.PHOTOLIBRARY);\r\n          }\r\n        },\r\n        {\r\n          text: 'Use Camera',\r\n          handler: () => {\r\n            this.takePicture(this.camera.PictureSourceType.CAMERA);\r\n          }\r\n        },\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel'\r\n        }\r\n      ]\r\n    });\r\n    actionSheet.present();\r\n  }\r\n\r\n  public takePicture(sourceType) {\r\n    // Create options for the Camera Dialog\r\n    var options = {\r\n      quality: 100,\r\n      sourceType: sourceType,\r\n      saveToPhotoAlbum: false,\r\n      correctOrientation: true\r\n    };\r\n\r\n    // Get the data of an image\r\n    this.camera.getPicture(options).then((imagePath) => {\r\n      // Special handling for Android library\r\n      if (this.platform.is('android') && sourceType === this.camera.PictureSourceType.PHOTOLIBRARY) {\r\n        this.filePath.resolveNativePath(imagePath)\r\n          .then(filePath => {\r\n            let correctPath = filePath.substr(0, filePath.lastIndexOf('/') + 1);\r\n            let currentName = imagePath.substring(imagePath.lastIndexOf('/') + 1, imagePath.lastIndexOf('?'));\r\n            this.copyFileToLocalDir(correctPath, currentName, this.createFileName());\r\n          });\r\n      } else {\r\n        var currentName = imagePath.substr(imagePath.lastIndexOf('/') + 1);\r\n        var correctPath = imagePath.substr(0, imagePath.lastIndexOf('/') + 1);\r\n        this.copyFileToLocalDir(correctPath, currentName, this.createFileName());\r\n      }\r\n    }, (err) => {\r\n      this.presentToast('Error while selecting image.');\r\n    });\r\n  }\r\n\r\n  private createFileName() {\r\n    var d = new Date(),\r\n      n = d.getTime(),\r\n      newFileName = n + \".jpg\";\r\n    return newFileName;\r\n  }\r\n\r\n  // Copy the image to a local folder\r\n  private copyFileToLocalDir(namePath, currentName, newFileName) {\r\n    this.file.copyFile(namePath, currentName, this.cordova.file.dataDirectory, newFileName).then(success => {\r\n      this.lastImage = newFileName;\r\n    }, error => {\r\n      this.presentToast('Error while storing file.');\r\n    });\r\n  }\r\n\r\n  private presentToast(text) {\r\n    let toast = this.toastCtrl.create({\r\n      message: text,\r\n      duration: 3000,\r\n      position: 'top'\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  // Always get the accurate path to your apps folder\r\n  public pathForImage(img) {\r\n    if (img === null) {\r\n      return '';\r\n    } else {\r\n      return this.cordova.file.dataDirectory + img;\r\n    }\r\n  }\r\n\r\n  public uploadImage() {\r\n    // Destination URL\r\n    var url = \"http://192.168.1.116:8080/viucab/Resources/uploadImage\";\r\n\r\n    // File for Upload\r\n    var targetPath = this.pathForImage(this.lastImage);\r\n\r\n    // File name only\r\n    var filename = this.lastImage;\r\n\r\n    var options = {\r\n      fileKey: \"file\",\r\n      fileName: filename,\r\n      chunkedMode: false,\r\n      httpMethod: \"POST\",\r\n      mimeType: \"multipart/form-data\",\r\n      params: { 'fileName': filename }\r\n    };\r\n\r\n    const fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n    this.loading = this.loadingCtrl.create({\r\n      content: 'Uploading...',\r\n    });\r\n    this.loading.present();\r\n\r\n    // Use the FileTransfer to upload the image\r\n    fileTransfer.upload(targetPath, url, options).then(data => {\r\n      this.loading.dismissAll()\r\n      this.presentToast('Image succesful uploaded.');\r\n    }, err => {\r\n      this.loading.dismissAll()\r\n      this.presentToast('Error while uploading file.');\r\n    });\r\n  }*/\r\n\r\n\r\n  /*ionViewDidLoad() {\r\n    console.log('ionViewDidLoad InfovideoPage');\r\n  }\r\n\r\n  getPicture() {\r\n    let options: CameraOptions = {\r\n      destinationType: this.camera.DestinationType.DATA_URL,\r\n      targetWidth: 1000,\r\n      targetHeight: 1000,\r\n      quality: 100\r\n    }\r\n    this.camera.getPicture(options)\r\n      .then(imageData => {\r\n        this.image = `data:image/jpeg;base64,${imageData}`;\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n    \r\n  }*/\r\n\r\n\r\n  /*getImage() {\r\n    const options: CameraOptions = {\r\n      quality: 100,\r\n      destinationType: this.camera.DestinationType.FILE_URI,\r\n      sourceType: this.camera.PictureSourceType.PHOTOLIBRARY\r\n    }\r\n\r\n    this.camera.getPicture(options).then((imageData) => {\r\n      this.imageURI = imageData;\r\n      this.presentToast(imageData);\r\n    }, (err) => {\r\n      console.log(err);\r\n      this.presentToast(err);\r\n    });\r\n  }*/\r\n\r\n  /*uploadFile() {\r\n    let loader = this.loadingCtrl.create({\r\n      content: \"Uploading...\"\r\n    });\r\n    loader.present();\r\n    const fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n    let options: FileUploadOptions = {\r\n      fileKey: 'ionicfile',\r\n      fileName: 'ionicfile',\r\n      chunkedMode: false,\r\n      mimeType: \"image/jpeg\",\r\n      headers: {}\r\n    }\r\n    this.presentToast(this.image);\r\n    fileTransfer.upload(this.image, 'http://192.168.1.116:8080/viucab/Resources/uploadImage', options)\r\n      .then((data) => {\r\n        console.log(data + \" Uploaded Successfully\");\r\n        this.imageFileName = \"foo\"\r\n        loader.dismiss();\r\n        this.presentToast(\"Image uploaded successfully\");\r\n      }, (err) => {\r\n        console.log(err);\r\n        loader.dismiss();\r\n        this.presentToast(err);\r\n      });\r\n  }\r\n\r\n  presentToast(msg) {\r\n    let toast = this.toastCtrl.create({\r\n      message: msg,\r\n      duration: 10000,\r\n      position: 'bottom'\r\n    });\r\n\r\n    toast.onDidDismiss(() => {\r\n      console.log('Dismissed toast');\r\n    });\r\n\r\n    toast.present();\r\n  }*/\r\n\r\n\r\n/*\r\n\r\n  datos: any;\r\n  respu: any;\r\n  imageURI: any;\r\n  imageFileName: any;\r\n\r\n  constructor(public navCtrl: NavController,\r\n    private transfer: FileTransfer,\r\n    private file: File,\r\n    private camera: Camera,\r\n    public loadingCtrl: LoadingController,\r\n    public toastCtrl: ToastController,\r\n    public api: RestApiService) { }\r\n\r\n  fileTransfer: FileTransferObject = this.transfer.create();\r\n\r\n  getImage() {\r\n    const options: CameraOptions = {\r\n      quality: 100,\r\n      destinationType: this.camera.DestinationType.FILE_URI,\r\n      sourceType: this.camera.PictureSourceType.PHOTOLIBRARY\r\n    }\r\n\r\n    this.camera.getPicture(options).then((imageData) => {\r\n      this.imageURI = imageData;\r\n    }, (err) => {\r\n      console.log(err);\r\n      this.presentToast(err);\r\n    });\r\n  }\r\n  \r\n\r\n  uploadFile() {\r\n\r\n    /*let headers = new Headers({ 'Content-Type': 'multipart/form-data' });\r\n    let param: FileUploadOptions = {\r\n      fileKey: 'ionicfile',\r\n      fileName: 'ionicfile',\r\n      httpMethod: \"PUT\",\r\n      chunkedMode: false,\r\n      mimeType: \"multipart/form-data\",\r\n      headers: {}\r\n    }\r\n    this.api.putTodo('Resources/uploadImage',this.imageURI, param).subscribe((data) => { // Success\r\n      this.respu = data.json()\r\n      this.presentToast(this.respu);\r\n      console.log(this.respu)\r\n    },\r\n      (error) => {\r\n        this.presentToast(error);\r\n        console.error(error);\r\n      });*/\r\n\r\n    /*let loader = this.loadingCtrl.create({\r\n      content: \"Uploading...\"\r\n    });\r\n    loader.present();\r\n    \r\n    let options: FileUploadOptions = {\r\n      fileKey: 'ionicfile',\r\n      fileName: 'ionicfile',\r\n      httpMethod: \"GET\",\r\n      chunkedMode: false,\r\n      mimeType: \"multipart/form-data\",\r\n      headers: {}\r\n    }\r\n\r\n    //this.presentToast(\"Antes de upload\");\r\n    fileTransfer.upload(this.imageURI, 'http://192.168.1.116:8080/viucab/Resources/uploadImage', options)\r\n      .then((data) => {\r\n        console.log(data + \" Uploaded Successfully\");\r\n        this.imageFileName = \"foo\"\r\n        //loader.dismiss();\r\n        this.presentToast(\"Image uploaded successfully\");\r\n      }, (err) => {\r\n        console.log(err);\r\n        //loader.dismiss();\r\n        this.presentToast(err);\r\n      });\r\n  }\r\n\r\n  presentToast(msg) {\r\n    let toast = this.toastCtrl.create({\r\n      message: msg,\r\n      duration: 3000,\r\n      position: 'bottom'\r\n    });\r\n\r\n    toast.onDidDismiss(() => {\r\n      console.log('Dismissed toast');\r\n    });\r\n\r\n    toast.present();\r\n  }\r\n\r\n  ionViewDidLoad() {\r\n    console.log('ionViewDidLoad CargarVideoPage');\r\n  }\r\n*/\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Modulo3/cargar-video/cargar-video.ts"],"sourceRoot":""}